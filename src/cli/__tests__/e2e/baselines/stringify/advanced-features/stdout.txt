export async function asyncGenerator(): AsyncIterableIterator {
    for (let i = 0; i < 5; i++) {
        await new Promise(resolve => setTimeout(resolve, 100));
        yield i;
    }
}
export const asyncArrowFunction = (data: unknown[], item) => {
    return data.map(item => String(item));
};
export function processData({ name, age, ...rest }: {
    name: string;
    age: number;
    /* Unsupported: IndexSignature */
}) {
    return { metadata: rest };
}
export const [first, second, ...remaining] = [1, 2, 3, 4, 5];
export type EventName = /* Unsupported: TemplateHead */;
export type HTTPMethod = "GET" | "POST" | "PUT" | "DELETE";
export class EventEmitter {
    listeners;
    on(event: K, listener) {
        if (!this.listeners[event]) {
            this.listeners[event] = [];
        }
        this.listeners[event]!.push(listener);
    }
    emit(event: K, ...) {
        this.listeners[event].forEach(listener => listener(...args));
    }
}
