import { EventEmitter } from "events";
interface User {
    id: number;
    name: string;
    email?: string;
}
type ApiResponse = {
    data: T;
    status;
    message?: string;
};
abstract class BaseService {
    serviceName;
    constructor(private config: Record<string, any>) {
        func();
    }
    initialize() { }
}
class UserService {
    serviceName;
    users;
    initialize() {
        this.emit("initialized", this.serviceName);
    }
    getUser(id: number) {
        const user = this.users.get(id);
        if (!user) {
            return { data: null as any, status: "error", message: `User with id ${id} not found` };
        }
        return { data: user, status: "success" };
    }
    createUser(userData: T) {
        const user: User = { id: Date.now(), name: userData.name || "Unknown", email: userData.email };
        this.users.set(user.id, user);
        return { data: user, status: "success" };
    }
}
export type {};
export {};

